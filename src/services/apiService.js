/**
 * ÁúüÂÆûAPIÊúçÂä°
 * Â§ÑÁêÜ‰∏éÂêéÁ´ØAPIÁöÑÈÄö‰ø°
 */

import { API_CONFIG, buildApiUrl } from '../config/api';

/**
 * ÈÄöÁî®APIËØ∑Ê±ÇÂáΩÊï∞
 * @param {string} url - ËØ∑Ê±ÇURL
 * @param {Object} options - ËØ∑Ê±ÇÈÄâÈ°π
 * @returns {Promise} APIÂìçÂ∫î
 */
const apiRequest = async (url, options = {}) => {
  const defaultOptions = {
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
    timeout: API_CONFIG.TIMEOUT,
  };

  const requestOptions = { ...defaultOptions, ...options };

  try {
    console.log(`üåê API Request: ${requestOptions.method || 'GET'} ${url}`);

    const response = await fetch(url, requestOptions);

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log(`‚úÖ API Response:`, data);

    return data;
  } catch (error) {
    console.error(`‚ùå API Error:`, error);
    throw error;
  }
};

/**
 * Â≠óÊÆµÊò†Â∞ÑÔºöÂ∞ÜAPIËøîÂõûÁöÑÂ≠óÊÆµÂêçÊò†Â∞ÑÂà∞ÂâçÁ´Ø‰ΩøÁî®ÁöÑÂ≠óÊÆµÂêç
 * @param {Object} apiUser - APIËøîÂõûÁöÑÁî®Êà∑ÂØπË±°
 * @returns {Object} ÂâçÁ´Ø‰ΩøÁî®ÁöÑÁî®Êà∑ÂØπË±°
 */
const mapApiUserToFrontend = (apiUser) => {
  return {
    id: apiUser.userId,
    staff_id: apiUser.staffId,
    first_name: apiUser.firstName,
    last_name: apiUser.lastName,
    location: apiUser.locationCode,
    is_active: apiUser.active,
    // ‰øùÁïôÂéüÂßãAPIÂ≠óÊÆµ‰ª•Â§áÂêéÁî®
    userId: apiUser.userId,
    staffId: apiUser.staffId,
    firstName: apiUser.firstName,
    lastName: apiUser.lastName,
    locationCode: apiUser.locationCode,
    active: apiUser.active,
  };
};

/**
 * Â≠óÊÆµÊò†Â∞ÑÔºöÂ∞ÜÂâçÁ´ØÂ≠óÊÆµÂêçÊò†Â∞ÑÂà∞APIÂ≠óÊÆµÂêç
 * @param {string} frontendField - ÂâçÁ´ØÂ≠óÊÆµÂêç
 * @returns {string} APIÂ≠óÊÆµÂêç
 */
const mapFrontendFieldToApi = (frontendField) => {
  const fieldMap = {
    id: 'userId',
    staff_id: 'staffId',
    first_name: 'firstName',
    last_name: 'lastName',
    location: 'locationCode',
    is_active: 'active',
  };
  return fieldMap[frontendField] || frontendField;
};

/**
 * Ëé∑ÂèñÁî®Êà∑ÂàóË°®ÔºàÂàÜÈ°µÔºâ
 * @param {Object} params - Êü•ËØ¢ÂèÇÊï∞
 * @param {Object} params.pagination - ÂàÜÈ°µÂèÇÊï∞ {current, pageSize}
 * @param {Object} params.filters - Á≠õÈÄâÂèÇÊï∞
 * @param {Object} params.sorter - ÊéíÂ∫èÂèÇÊï∞ {field, order}
 * @returns {Promise} Áî®Êà∑ÂàóË°®Êï∞ÊçÆ
 */
export const getUsersFromApi = async (params = {}) => {
  const { pagination = { current: 1, pageSize: 10 }, sorter = {} } = params;

  // ÊûÑÂª∫Êü•ËØ¢ÂèÇÊï∞
  const queryParams = {
    page: pagination.current - 1, // API‰ªé0ÂºÄÂßãËÆ°Êï∞
    size: pagination.pageSize,
  };

  // Ê∑ªÂä†ÊéíÂ∫èÂèÇÊï∞
  if (sorter.field) {
    // Â∞ÜÂâçÁ´ØÂ≠óÊÆµÂêçÊò†Â∞ÑÂà∞APIÂ≠óÊÆµÂêç
    const apiField = mapFrontendFieldToApi(sorter.field);
    const order = sorter.order === 'descend' ? 'DESC' : 'ASC';
    queryParams.sort = `${apiField},${order}`;
  }

  const url = buildApiUrl(API_CONFIG.ENDPOINTS.USERS, queryParams);

  try {
    const response = await apiRequest(url);

    // Êò†Â∞ÑAPIËøîÂõûÁöÑÁî®Êà∑Êï∞ÊçÆÂà∞ÂâçÁ´ØÊ†ºÂºè
    const mappedUsers = (response.content || []).map(mapApiUserToFrontend);

    return {
      data: mappedUsers,
      pagination: {
        page: (response.pageable?.pageNumber || 0) + 1, // ËΩ¨Êç¢‰∏∫‰ªé1ÂºÄÂßã
        pageSize: response.pageable?.pageSize || pagination.pageSize,
        total: response.totalElements || 0,
      },
    };
  } catch (error) {
    console.error('Failed to fetch users from API:', error);
    throw new Error('Failed to fetch users from server');
  }
};

/**
 * Ê†πÊçÆIDËé∑ÂèñÂçï‰∏™Áî®Êà∑
 * @param {string} userId - Áî®Êà∑ID (staffId)
 * @returns {Promise} Áî®Êà∑Êï∞ÊçÆ
 */
export const getUserByIdFromApi = async (userId) => {
  const url = buildApiUrl(`${API_CONFIG.ENDPOINTS.USER_BY_ID}/${userId}`);

  try {
    const apiUser = await apiRequest(url);
    // Êò†Â∞ÑAPIËøîÂõûÁöÑÁî®Êà∑Êï∞ÊçÆÂà∞ÂâçÁ´ØÊ†ºÂºè
    return mapApiUserToFrontend(apiUser);
  } catch (error) {
    console.error(`Failed to fetch user ${userId} from API:`, error);
    throw new Error(`User with ID ${userId} not found`);
  }
};

/**
 * Â∞ÜÂâçÁ´ØÁî®Êà∑Êï∞ÊçÆÊò†Â∞ÑÂà∞APIÊ†ºÂºè
 * @param {Object} frontendUser - ÂâçÁ´ØÁî®Êà∑ÂØπË±°
 * @returns {Object} APIÊ†ºÂºèÁöÑÁî®Êà∑ÂØπË±°
 */
const mapFrontendUserToApi = (frontendUser) => {
  return {
    staffId: frontendUser.staff_id,
    firstName: frontendUser.first_name,
    lastName: frontendUser.last_name,
    locationCode: frontendUser.location,
    active:
      frontendUser.is_active !== undefined ? frontendUser.is_active : true,
  };
};

/**
 * ÂàõÂª∫Êñ∞Áî®Êà∑
 * @param {Object} userData - Áî®Êà∑Êï∞ÊçÆ
 * @returns {Promise} ÂàõÂª∫ÁöÑÁî®Êà∑Êï∞ÊçÆ
 */
export const createUserFromApi = async (userData) => {
  const url = buildApiUrl(API_CONFIG.ENDPOINTS.CREATE_USER);

  // Â∞ÜÂâçÁ´ØÊï∞ÊçÆÊ†ºÂºèÊò†Â∞ÑÂà∞APIÊ†ºÂºè
  const apiUserData = mapFrontendUserToApi(userData);

  try {
    const apiUser = await apiRequest(url, {
      method: 'POST',
      body: JSON.stringify(apiUserData),
    });

    // Êò†Â∞ÑAPIËøîÂõûÁöÑÁî®Êà∑Êï∞ÊçÆÂà∞ÂâçÁ´ØÊ†ºÂºè
    return mapApiUserToFrontend(apiUser);
  } catch (error) {
    console.error('Failed to create user via API:', error);

    // Â§ÑÁêÜÈ™åËØÅÈîôËØØ
    if (error.message.includes('400')) {
      throw {
        type: 'ValidationError',
        errors: { general: 'Invalid user data' },
      };
    }

    throw new Error('Failed to create user');
  }
};

/**
 * Âà†Èô§Áî®Êà∑
 * @param {string} userId - Áî®Êà∑ID (staffId)
 * @returns {Promise} Âà†Èô§ÁªìÊûú
 */
export const deleteUserFromApi = async (userId) => {
  const url = buildApiUrl(`${API_CONFIG.ENDPOINTS.DELETE_USER}/${userId}`);

  try {
    await apiRequest(url, {
      method: 'DELETE',
    });

    return {
      success: true,
      message: 'User deleted successfully',
    };
  } catch (error) {
    console.error(`Failed to delete user ${userId} via API:`, error);
    throw new Error(`Failed to delete user with ID ${userId}`);
  }
};

// ÂØºÂá∫APIÊúçÂä°
const apiService = {
  getUsersFromApi,
  getUserByIdFromApi,
  createUserFromApi,
  deleteUserFromApi,
  mapApiUserToFrontend,
  mapFrontendUserToApi,
};

export default apiService;
